type Query {
    login(username: String!, password: String!): User!,
    getNote: String!, 
    getCalendar(date: String!): Boolean!,
    getOneDay(date: String!): [Block!]!,
    getTodo: [Todo]!,
    getEmptyBlock: [EmptyBlock!]!
}

type Mutation {
    register(registerInput: registerInput): User!,
    updateNote(msg: String!): String!,
    addBlock(block: blockInput!): Block!, # Date '2021/01/12'  
    deleteBlock(blockID: ID!): Block!,    # Date
    updateBlock(blockID: ID!, block: blockInput!): Block!,  # Date
    addTodo(todo: todoInput!): Todo!,
    deleteTodo(todoID: ID!): Todo!,
    updateTodo(todoID: ID!, todo: todoInput!): Todo!,
    addEmptyBlock(emptyBlockInput: emptyBlockInput!): EmptyBlock!,
    deleteEmptyBlock(emptyBlockID: ID!): EmptyBlock!,
    updateEmptyBlock(emptyBlockID: ID!, emptyBlockInput: emptyBlockInput!): EmptyBlock!,
    rmUserDB: String!
}

type Subscription {
    updateCalendar: SubscriptionPayload!
}

type User {
    id: ID!
    username: String!
    pwdHash: String!
    todoExpiresDay: Int!
    calendarExpiresDay: Int!
    notificationTime: Int!
    blockExpiresDay: Int!
    token: String!
}

type Block {
    id: ID!
    userID: ID!
    name: String!
    subject: String!
    color: String!
    onCalendar: Boolean!
    startTime: Int!
    endTime: Int!
    Day: String!
    isReview: Boolean!
    repeated: Int!
    expiredAfter: String!
    blockExpiresDay: String!
}

type Todo {
    id: ID!
    userID: ID!
    name: String!
    category: String!
    expiredAfter: String!
    subject: String!
    color: String!
    completedDay: String
}

type EmptyBlock {
    id: ID!
    userID: ID!
    subject: String!
    color: String!
}

input blockInput {
    name: String!
    subject: String!
    color: String!
    onCalendar: Boolean!
    startTime: Int!
    endTime: Int!
    Day: String!
    isReview: Boolean!
    repeated: Int!
}

input todoInput {
    name: String!
    category: String!
    subject: String!
    color: String!
}

input emptyBlockInput {
    subject: String!
    color: String!
}

input registerInput {
    username: String!
    password: String!
    confirmPassword: String!
    todoExpiresDay: Int!
    calendarExpiresDay: Int!
    blockExpiresDay: Int!
    notificationTime: Int!
}

type calendarInfo {
    Day: String!
    ifExist: Boolean!
}

enum MutationType {
    ADDED
    DELETED
    UPDATED
}

type SubscriptionPayload {
    type: MutationType!
    info: calendarInfo!
}